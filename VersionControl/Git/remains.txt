View
| &#x2714; | git tag -l                                  | List tags with a pattern |
| &#x2714; | git tag -n                                  | List tags with annotations |
| &#x2714; | git show <tagname                           | Show the tag details |
| &#x2714; | git stash list                              | List stashes |
| &#x2714; | git stash show                              | Show the changes recorded in the stash |


| &#x2714; | git fetch                               | downloads everything from remote branch to the remote tracking branch |
| &#x2714; | git fetch **RepoName BranchName**     | downloads everything from remote specified branch to the remote tracking branch |
git pull 
| &#x274C; | git clean -f\|--force -d                | Recursively remove untracked files from the working tree |
| &#x274C; | git clean -f\|--force -d -x             | Recursively remove untracked and ignored files from the working tree |
| &#x274C; | git commit --fixup 5720fdf -m "New message" | Merge into the specified commit |
| &#x274C; | git revert 5720fdf                          | Revert a commit |
| &#x274C; | git rebase --interactive [origin/main]      | Rebase a PR (`git pull` first) |
| &#x274C; | git rebase --interactive 5720fdf            | Rebase to a particular commit |
| &#x274C; | git rebase --interactive --root 5720fdf     | Rebase to the root commit |
| &#x274C; | git rebase --continue                       | Continue an interactive rebase |
| &#x274C; | git rebase --abort                          | Cancel an interactive rebase |
| &#x274C; | git rebase **Branchname**     Reapply commits on top of another base tip
| &#x274C; | git rebase --interactive <base>       Interactively rebase the current branch onto another base
| &#x274C; | git cherry-pick **Commit-hash**            Apply the changes introduced by some existing commits
| &#x274C; | git cherry-pick --abort           Abort the cherry-pick process
| &#x274C; | git cherry-pick --continue           Continue the cherry-pick process after resolving conflicts



seee differene in VS code and change files on vs code

| &#x2714; | git merge **Branchname**                  | Merge branch into current branch |
| &#x2714; | git merge origin/**Branchname**           | Merge the referance(Remote-Tracking Branches) from remote branch into current branch|
| &#x2714; | git merge --no-ff **Branchname**    Merge with a merge commit even if a fast-forward merge is possible
| &#x2714; | git merge --squash **Branchname**    Merge a branch into the current branch but do not create a commit
| &#x2714; | git merge --abort                  Abort the merge process and try to reconstruct the pre-merge state
| &#x2714; | git mergetool               Run merge conflict resolution tools to resolve merge conflicts


## Stash
| &#x2714; / &#x274C; | Command | Description |
| - | - | - | 
git stash                  Stash the changes in a dirty working directory away
| &#x2714; | git stash push -m "Message"             | Stash staged files |
| &#x2714; | git stash --include-untracked           | Stash working area and staged files |
| &#x2714; | git stash --staged                      | Stash staged files |
| &#x2714; | git stash apply                         | Moved last stash to working area |
| &#x2714; | git stash apply 0                       | Moved named stash to working area |
| &#x2714; | git stash clear                         | Clear the stash |
| &#x2714; | git stash pop` - Apply the changes recorded in the stash to the working directory and delete the stash
| &#x2714; | git stash drop` - Remove a single stashed state from the stash list

## Tags
| &#x2714; / &#x274C; | Command | Description |
| - | - | - |
| &#x2714; | git tag                                              | List all tags |
| &#x2714; | git tag <tagname>                          Create a new tag
| &#x2714; | git tag -a\|--annotate 0.0.1 -m\|--message "Message" | Create a tag |
| &#x2714; | git tag -d\|--delete 0.0.1                           | Delete a tag |
| &#x2714; | git push --tags                                      | Push tags to remote repository |
| &#x2714; | git push origin <tagname>` - Push a tag to the remote repository
| &#x2714; | git push origin --delete <tagname>` - Delete a tag from the remote repository


## File Handling
| &#x2714; / &#x274C; | Command | Description |
| - | - | - |
| &#x2714; | git mv
rm
| &#x2714; | git reset --staged **FileName**
| &#x2714; | git reset
| &#x2714; | git mv **FileName** **NEW-FileName**              | Move/rename file |
| &#x2714; | git rm --force **FileName**                 | Unstage and delete file |

## Submodules
| &#x2714; / &#x274C; | Command | Description |
| - | - | - |
| &#x2714; | git submodule status                    | Check status of all submodules |
- **`git submodule add <url>` - Add a submodule.**
- **`git submodule init` - Initialize the submodule configuration.**
- **`git submodule update` - Fetch and checkout the submodule.**
- **`git submodule deinit <path>` - Deinitialize a submodule.**
- **`git submodule status` - Show the status of submodules.**
- **`git submodule sync` - Synchronize submodule URLs.**
- **`git submodule foreach <command>` - Execute a command in each submodule.**


## Advanced Commands
Commands for advanced Git operations.

- `git bisect` - Use binary search to find the commit that introduced a bug.
  - `git bisect start` - Start the bisect process.
  - `git bis